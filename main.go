package main

import (
	"flag"
	"fmt"
	"io"
	"log"
	"os"

	"github.com/jnschaeffer/cve-2022-44268-detector/internal/image/png"
)

const (
	profileKeyword = "Raw profile type"
)

var (
	filename      string
	printContents bool
)

func init() {
	flag.StringVar(&filename, "filename", "", "filename to parse (uses stdin if not set)")
	flag.BoolVar(&printContents, "print", false, "if set, print the contents of the malicious text chunk if found")
}

func findProfileChunk(chunks []png.TextChunk) (png.TextChunk, bool) {
	for _, chunk := range chunks {
		if chunk.Keyword == profileKeyword {
			return chunk, true
		}
	}

	return png.TextChunk{}, false
}

func main() {
	flag.Parse()

	var r io.Reader = os.Stdin
	if filename != "" {
		f, err := os.Open(filename)
		if err != nil {
			log.Fatal(err)
		}

		defer f.Close()

		r = f
	}

	chunks, err := png.FindTextChunks(r)
	if err != nil {
		log.Fatal(err)
	}

	chunk, found := findProfileChunk(chunks)
	if !found {
		fmt.Println("no profile chunk found. this image is likely not malicious")

		// Exit with status code 1 here - technically not finding anything is a failure
		os.Exit(1)
	}

	fmt.Println("***PROFILE CHUNK FOUND! if this was found in a production system, update your dependencies immediately and inspect your systems for evidence of further compromise!***")

	if printContents {
		fmt.Println("chunk text:")
		_, err := os.Stdout.Write(chunk.Text)
		if err != nil {
			log.Fatal(err)
		}
	}
}
